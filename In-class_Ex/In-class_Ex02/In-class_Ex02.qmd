---
title: "In-class Exercise 2:"
format: 
  html: 
    code-fold: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-line-numbers: true
    code-copy: hover
execute: 
  eval: true
  echo: true
  freeze: auto
---

# 1.1 Packages included

For this exercise, the following packages will be used.

-   arrow

-   lubridate

-   tidyverse

-   tmap

-   sf

```{r}
pacman::p_load("arrow","lubridate","tidyverse","tmap","sf")
```

# 1.2 Import Grab-Posisi Dataset
<<<<<<< HEAD

`read_parquet(filePath)`: function to read parquet files, though the commented out line is preferred, it don't work on macOS.

`as_datetime(df$fieldName)`: function from `lubridate`, convert integers into datetime

=======
`read_parquet(filePath)`: function to read parquet files, though the commented out line is preferred, it don't work on macOS.

`as_datetime(df$fieldName)`: function from `lubridate`, convert integers into datetime
>>>>>>> 591255a (Commit asked to be done before rebasing can work)
```{r}
#| eval: false
df <- read_parquet("data/GrabPosisi/part-00000-8bbff892-97d2-4011-9961-703e38972569.c000.snappy.parquet")
# df <- read_parquet("data/GrabPosisi/part-00000.parquet")
# can also use mutate
df$pingtimestamp <- as_datetime(df_1$pingtimestamp)
write_rds(df, "data/rds/part0.rds")
```
<<<<<<< HEAD

The field `pingtimestamp` is now in POSIXct format (tibble time format).

# 1.3 Extract Trip starting location

=======
The field `pingtimestamp` is now in POSIXct format (tibble time format).

# 1.3 Extract Trip starting location
>>>>>>> 591255a (Commit asked to be done before rebasing can work)
*Use tidyverse function to do the extraction*

`wday()`: function from `lubridate` to get the weekday of the imported datetime

<<<<<<< HEAD
`factor()`: function that extracts out
=======
`factor()`: function that extracts out 
>>>>>>> 591255a (Commit asked to be done before rebasing can work)

`arrange(column, .by_group = FALSE)`: sort ascending according to timestamp

```{r}
#| eval: false
trip_starting <- df %>%
  # group by trip id
  group_by(trj_id) %>%
  # sort ascending by default
  arrange(pingtimestamp, .by_group = FALSE) %>%
  # get 1st row
  filter(row_number()==1) %>%
  mutate(weekday = wday(pingtimestamp,
                        label = TRUE,
                        abbr=TRUE),
         start_hr = factor(hour(pingtimestamp)),
         day = factor(mday(pingtimestamp))) 
```

# 1.4 Extract Trip destination

Using the previous code chunk with some modification

<<<<<<< HEAD
=======

>>>>>>> 591255a (Commit asked to be done before rebasing can work)
```{r}
#| eval: false
trip_destination <- df %>%
  # group by trip id
  group_by(trj_id) %>%
  # sort ascending by default
  arrange(desc(pingtimestamp), .by_group = FALSE) %>%
  # get 1st row
  filter(row_number()==1) %>%
  mutate(weekday = wday(pingtimestamp,
                        label = TRUE,
                        abbr=TRUE),
         end_hr = factor(hour(pingtimestamp)),
         day = factor(mday(pingtimestamp))) 
```

For own use, save in RDS; other wise, in requested format.

```{r}
#| eval: false
#| echo: false
write_rds(trip_starting, "data/rds/trip_starting.rds")
write_rds(trip_destination, "data/rds/trip_destination.rds")
```

## Import data

```{r}
origin_df <- read_rds("data/rds/trip_starting.rds")
destination_df <- read_rds("data/rds/trip_destination.rds")
```
