{
  "hash": "22c2d499f345c65e4ef044ee8fb8e0ea",
  "result": {
    "markdown": "---\ntitle: \"Take-home Exercise 1: Application of Spatial Point Pattern Analysis on Grab Hailing Service in Singapore\"\nformat: \n  html: \n    code-fold: true\n    code-summary: \"Show the code\"\n    code-overflow: wrap\n    code-line-numbers: true\n    code-copy: hover\n    self-contained: true\nexecute: \n  eval: true\n  echo: true\n  freeze: auto\nauthor: \"Tang Xin Yi\"\ndate: \"17 Jan 2024\"\n---\n\n\n# 1 Problem context\n\nThis exercise is looking into discovering insights relevant to the geographical and spatial distribution of Grab hailing service locations in Singapore.\n\nIn this exercise, the following packages are used.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, tidyverse, tmap, spatstat, raster, maptools, spNetwork, classInt, viridis, arrow, lubridate)\n```\n:::\n\n\n# 2 Data\n\n## 2.1 Background of the datasets used\n\nThe following datasets are used in this analysis exercise.\n\n-   `GrabPosisi`: Aspatial data\n\n-   `RoadMap`: from OpenStreetMap\n\n-   `Master Plan 2019 Subzone Boundary (No Sea)` from Data.gov.sg\n\n## 2.2 Import data\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrab <- read_parquet(\"../../data/aspatial/GrabPosisi/part-00000-8bbff892-97d2-4011-9961-703e38972569.c000.snappy.parquet\")\n\nroadmap <- st_read(dsn = \"../../data/geospatial/malaysia-singapore-brunei-latest-free.shp\",\n                   layer = \"gis_osm_roads_free_1\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `gis_osm_roads_free_1' from data source \n  `/Users/tangtang/Desktop/IS415 Geospatial Analytics and Applications/practice/is415gaa/data/geospatial/malaysia-singapore-brunei-latest-free.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 1759836 features and 10 fields\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: 99.66041 ymin: 0.8021131 xmax: 119.2601 ymax: 7.514393\nGeodetic CRS:  WGS 84\n```\n:::\n\n```{.r .cell-code}\nmp19 <- st_read(\"../../data/geospatial/MasterPlan2019SubzoneBoundaryNoSeaKML.kml\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `URA_MP19_SUBZONE_NO_SEA_PL' from data source \n  `/Users/tangtang/Desktop/IS415 Geospatial Analytics and Applications/practice/is415gaa/data/geospatial/MasterPlan2019SubzoneBoundaryNoSeaKML.kml' \n  using driver `KML'\nSimple feature collection with 332 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY, XYZ\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n:::\n:::\n\n\nFrom below, `grab$pingtimestamp` is not in the correct data type (it is in int class)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(grab)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 9\n  trj_id driving_mode osname  pingtimestamp rawlat rawlng speed bearing accuracy\n  <chr>  <chr>        <chr>           <int>  <dbl>  <dbl> <dbl>   <int>    <dbl>\n1 70014  car          android    1554943236   1.34   104.  18.9     248      3.9\n2 73573  car          android    1555582623   1.32   104.  17.7      44      4  \n3 75567  car          android    1555141026   1.33   104.  14.0      34      3.9\n4 1410   car          android    1555731693   1.26   104.  13.0     181      4  \n5 4354   car          android    1555584497   1.28   104.  14.8      93      3.9\n6 32630  car          android    1555395258   1.30   104.  23.2      73      3.9\n```\n:::\n\n```{.r .cell-code}\ngrab$pingtimestamp = as_datetime(grab$pingtimestamp)\n```\n:::\n\n\nNow the `pingtimestamp` is in the correct data type `POSIXct` which represents datetime in tibble\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(grab)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 9\n  trj_id driving_mode osname  pingtimestamp       rawlat rawlng speed bearing\n  <chr>  <chr>        <chr>   <dttm>               <dbl>  <dbl> <dbl>   <int>\n1 70014  car          android 2019-04-11 00:40:36   1.34   104.  18.9     248\n2 73573  car          android 2019-04-18 10:17:03   1.32   104.  17.7      44\n3 75567  car          android 2019-04-13 07:37:06   1.33   104.  14.0      34\n4 1410   car          android 2019-04-20 03:41:33   1.26   104.  13.0     181\n5 4354   car          android 2019-04-18 10:48:17   1.28   104.  14.8      93\n6 32630  car          android 2019-04-16 06:14:18   1.30   104.  23.2      73\n# ℹ 1 more variable: accuracy <dbl>\n```\n:::\n:::\n\n\nThere are Z dimensions in `mp19` multipolygon Z, drop Z dimensions to keep the multipolygons\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmp19 <- st_zm(mp19$geometry, drop = TRUE, what = \"ZM\")\n```\n:::\n\n\nThe tibble data.frame is using coordinate system `WGS 84`, but we want to use the data in `SVY21`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(mp19)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmp19 <- st_transform(mp19, crs = 3414)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(roadmap)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 6 features and 10 fields\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: 101.7033 ymin: 1.305992 xmax: 103.8301 ymax: 3.147986\nGeodetic CRS:  WGS 84\n   osm_id code      fclass                   name  ref oneway maxspeed layer\n1 4386520 5113     primary           Orchard Road <NA>      F       50     0\n2 4578273 5114   secondary    Jalan Bukit Bintang <NA>      F        0     0\n3 4579495 5122 residential         Jalan Nagasari <NA>      B        0     0\n4 4579533 5122 residential  Persiaran Raja Chulan <NA>      B        0     0\n5 4579534 5122 residential           Jalan Ceylon <NA>      B        0     0\n6 4579536 5122 residential Changkat Bukit Bintang <NA>      F        0     0\n  bridge tunnel                       geometry\n1      F      F LINESTRING (103.8301 1.3060...\n2      F      F LINESTRING (101.7226 3.1478...\n3      F      F LINESTRING (101.7084 3.1473...\n4      F      F LINESTRING (101.7043 3.1468...\n5      F      F LINESTRING (101.7033 3.1476...\n6      F      F LINESTRING (101.7088 3.1470...\n```\n:::\n\n```{.r .cell-code}\nst_crs(roadmap)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"latitude\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"longitude\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n```\n:::\n:::\n\n\n`roadmap` has a similar problem as `mp19`, the coordinate system needs to be changed to `SVY 21`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nroadmap <- st_transform(roadmap, crs = 3414)\nhead(roadmap)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 6 features and 10 fields\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: -208807.5 ymin: 32035.45 xmax: 27643.1 ymax: 235953.4\nProjected CRS: SVY21 / Singapore TM\n   osm_id code      fclass                   name  ref oneway maxspeed layer\n1 4386520 5113     primary           Orchard Road <NA>      F       50     0\n2 4578273 5114   secondary    Jalan Bukit Bintang <NA>      F        0     0\n3 4579495 5122 residential         Jalan Nagasari <NA>      B        0     0\n4 4579533 5122 residential  Persiaran Raja Chulan <NA>      B        0     0\n5 4579534 5122 residential           Jalan Ceylon <NA>      B        0     0\n6 4579536 5122 residential Changkat Bukit Bintang <NA>      F        0     0\n  bridge tunnel                       geometry\n1      F      F LINESTRING (27637.52 32038....\n2      F      F LINESTRING (-206660 235943....\n3      F      F LINESTRING (-208246.4 23589...\n4      F      F LINESTRING (-208704.9 23583...\n5      F      F LINESTRING (-208807.5 23591...\n6      F      F LINESTRING (-208200.4 23585...\n```\n:::\n:::\n\n\n## 2.3 Prepare required Geographical data layers\n\nThis exercise needs the following geographical data layers\n\n1.  Grab taxi location points either by origins or destinations\n\n2.  Road layer within Singapore excluding outer islands\n\n3.  Singapore boundary layer excluding outer islands\n\n### 2.3.1 Get Grab taxi origin and destination layer\n\nGet the origin tibble data.frame\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrip_origin <- grab %>% \n  # group by trip id\n  group_by(trj_id) %>% \n  # sort: ascending by default\n  arrange(pingtimestamp, .by_group = FALSE) %>% \n  # get 1st row\n  filter(row_number()==1) %>% \n  mutate(weekday = wday(pingtimestamp,\n                        label = TRUE,\n                        abbr = TRUE),\n         start_hr = factor(hour(pingtimestamp)),\n         day = factor(mday(pingtimestamp)))\n```\n:::\n\n\nGet the destination tibble data.frame\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrip_dest <- grab %>% \n  group_by(trj_id) %>% \n  arrange(desc(pingtimestamp), .by_group = FALSE) %>% \n  filter(row_number()==1) %>% \n  mutate(weekday = wday(pingtimestamp,\n                        label = TRUE,\n                        abbr = TRUE),\n         end_hr = factor(hour(pingtimestamp)),\n         day = factor(mday(pingtimestamp)))\n```\n:::\n\n\nThe extracted data layers are written into `rds` files for easier reference later.\n\n\n::: {.cell}\n\n:::\n\n\n### 2.3.3 Get Singapore boundary layer\n\nThis part is using `mp19` and `roadmap`\n\nDo a quick plot of the union to get the boundary layer\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(st_union(mp19))\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\nSave the boundary layer into RDS file\n\n\n::: {.cell}\n\n:::\n\n\n### 2.3.2 Get Road layer within Singapore\n\nOverlap the 2 dataframe to get only roads for Singapore\n\n\n::: {.cell}\n\n```{.r .cell-code}\nroad_sg <- st_intersection(roadmap, mp19)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: attribute variables are assumed to be spatially constant throughout\nall geometries\n```\n:::\n:::\n\n\nZoom in to see the roads via ID\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"view\")\ntm_shape(road_sg)+\n  tm_lines()\ntmap_mode(\"plot\")\n```\n:::\n\n\nExtract out the road layer\n\n\n::: {.cell}\n\n:::\n\n\n# 3 Kernel Density Estimation\n\n# 4 Network-constrained Kernel Density Estimation\n",
    "supporting": [
      "Take-home_Ex01_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}