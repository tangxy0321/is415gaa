{
  "hash": "0645dc86786a49e0792e7109d1de22d3",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"In-class Exercise 9: Geographically Weighted Random Forest\"\nformat: \n  html: \n    code-fold: true\n    code-summary: \"Show the code\"\n    code-overflow: scroll\n    code-line-numbers: true\n    code-copy: hover\nexecute: \n  eval: true\n  echo: true\n  freeze: auto\n---\n\n\n`tidymodels` - community package that allows modelling to be done in R\n`rpart` - for recursive partitioning\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf,spdep,GWmodel,SpatialML,tmap,tidymodels,tidyverse,gtsummary,rpart,rpart.plot,ggstatsplot,performance)\n```\n:::\n\nImport data prepared, `read_rds` gives `sf`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrs_sf <- read_rds(\"../../data/rds_ex9/HDB_resale.rds\")\n```\n:::\n\n\n-   function from `rsample` package (which also provides spatial sampling)\n-   defaults of `initial_split`\n    -   `strata = NULL` -> indicating random sampling\n-   `resale_split` records which records is put into train and test set each\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\nresale_split <- initial_split(\n  rs_sf,\n  prop = 5/10\n)\ntrain_sf <- training(resale_split)\ntest_sf <- testing(resale_split)\n```\n:::\n\n\nConvert `train_sf` and `test_sf` into tibble data.frame\n\n-   Requirement od GRF - input numerical data.frame with at least 2 \n\n*No need to save, data prepared\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrain_df <- train_sf %>% \n  st_drop_geometry() %>% \n  as.data.frame()\n\ntest_df <- test_sf %>% \n  st_drop_geometry() %>% \n  as.data.frame()\n```\n:::\n\n\nCorrelation plot for whole dataset\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrs_sf1 <- rs_sf %>% \n  st_drop_geometry()\nggcorrmat(rs_sf1[,2:17])\n```\n\n::: {.cell-output-display}\n![](In-class_Ex09_files/figure-html/unnamed-chunk-5-1.png){width=1152}\n:::\n:::\n\n\nRevising mlr model\n\n-   `-c()` remove whatever column that is stated within ()\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrain_df <- train_df %>% \n  select(-c(PROX_CHAS))\ntrain_sf <- train_sf %>% \n  select(-c(PROX_CHAS))\ntest_df <- test_df %>% \n  select(-c(PROX_CHAS))\ntest_sf <- test_sf %>% \n  select(-c(PROX_CHAS))\n```\n:::\n\n\nTrain model with revised predictor list\n\n-   `rs_mlr` contains everything about the model\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrs_mlr <- lm(formula = RESALE_PRICE ~\n               FLOOR_AREA_SQM + STOREY_ORDER + REMAINING_LEASE_MTHS + PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER + \n               PROX_MRT + PROX_PARK + PROX_GOOD_PRISCH + PROX_MALL + PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN + \n               WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + WITHIN_1KM_PRISCH,\n             data = train_df)\n```\n:::\n\n\nExtract x,y coordinates from full, train and test datasets\n\n-   in the formula of GRF, the calculation of bandwidth using grf.bw need to input coordinate as independent parameter (data.frame containing only coordinates)\n\n-   Unlike GWR which only needs `sp` object to understand\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords <- st_coordinates(rs_sf)\ncoords_train <- st_coordinates(train_sf)\ncoords_test <- st_coordinates(test_sf)\n```\n:::\n\n\nCoordinates has been dropped, no need to repeatedly drop\n\nBuild recursive partitioning\n\n-   the objects offers information \n\n\n::: {.cell}\n\n```{.r .cell-code}\nrs_rp <- rpart(\n  formula = RESALE_PRICE ~\n    FLOOR_AREA_SQM + STOREY_ORDER + REMAINING_LEASE_MTHS + PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER + \n    PROX_MRT + PROX_PARK + PROX_GOOD_PRISCH + PROX_MALL + PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN + \n    WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + WITHIN_1KM_PRISCH,\n  data = train_df\n)\nrs_rp\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nn= 7950 \n\nnode), split, n, deviance, yval\n      * denotes terminal node\n\n 1) root 7950 1.139546e+14 433705.6  \n   2) PROX_CBD>=7.974483 6665 4.472144e+13 403736.0  \n     4) REMAINING_LEASE_MTHS< 1020.5 4228 1.573100e+13 370187.4  \n       8) PROX_GOOD_PRISCH>=3.629405 2271 3.851141e+12 340796.1 *\n       9) PROX_GOOD_PRISCH< 3.629405 1957 7.641480e+12 404294.6 *\n     5) REMAINING_LEASE_MTHS>=1020.5 2437 1.597594e+13 461940.1  \n      10) PROX_CBD>=10.40657 2331 9.762718e+12 451754.4  \n        20) PROX_GOOD_PRISCH>=4.866983 1123 2.801796e+12 423493.8 *\n        21) PROX_GOOD_PRISCH< 4.866983 1208 5.230246e+12 478026.4 *\n      11) PROX_CBD< 10.40657 106 6.532500e+11 685929.1 *\n   3) PROX_CBD< 7.974483 1285 3.219685e+13 589151.4  \n     6) REMAINING_LEASE_MTHS< 930.5 745 6.613365e+12 486637.6  \n      12) FLOOR_AREA_SQM< 98.5 451 2.446537e+12 442460.5 *\n      13) FLOOR_AREA_SQM>=98.5 294 1.936449e+12 554405.7 *\n     7) REMAINING_LEASE_MTHS>=930.5 540 6.952722e+12 730582.5  \n      14) REMAINING_LEASE_MTHS< 1071.5 314 2.461969e+12 676641.3 *\n      15) REMAINING_LEASE_MTHS>=1071.5 226 2.307737e+12 805527.4 *\n```\n\n\n:::\n:::\n\n\nPlot the splitting tree\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrpart.plot(rs_rp)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex09_files/figure-html/unnamed-chunk-10-1.png){width=1152}\n:::\n:::\n\n\nrandom forest\n\nThere are many packages that can apply random forest, yet `ranger` is the preferred package\n\n-   Faster in general\n\n-   Importance: use this metrics to determine which variable to use (in this exercise we are using GINI aka 'impurity')\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\nrs_rf <- ranger(\n  formula = RESALE_PRICE ~\n    FLOOR_AREA_SQM + STOREY_ORDER + REMAINING_LEASE_MTHS + PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER + \n    PROX_MRT + PROX_PARK + PROX_GOOD_PRISCH + PROX_MALL + PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN + \n    WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + WITHIN_1KM_PRISCH,\n  data = train_df,\n  importance = \"impurity\"\n)\nrs_rf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRanger result\n\nCall:\n ranger(formula = RESALE_PRICE ~ FLOOR_AREA_SQM + STOREY_ORDER +      REMAINING_LEASE_MTHS + PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +      PROX_MRT + PROX_PARK + PROX_GOOD_PRISCH + PROX_MALL + PROX_SUPERMARKET +      WITHIN_350M_KINDERGARTEN + WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +      WITHIN_1KM_PRISCH, data = train_df, importance = \"impurity\") \n\nType:                             Regression \nNumber of trees:                  500 \nSample size:                      7950 \nNumber of independent variables:  15 \nMtry:                             3 \nTarget node size:                 5 \nVariable importance mode:         impurity \nSplitrule:                        variance \nOOB prediction error (MSE):       756236996 \nR squared (OOB):                  0.9472481 \n```\n\n\n:::\n:::\n\n\nExtract out variable importance\n\n-   extract out row name to allow easier plotting as the plotting function would not be able to access rowname\n\n-   change the variable name to more intuitive\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvi <- as.data.frame(rs_rf$variable.importance)\nvi$variables <- rownames(vi)\nvi <- vi %>% \n  rename(vi = \"rs_rf$variable.importance\")\n```\n:::\n\n\nDisplaying the variable importance in form of bar chart\n\n-   `aes` state the x and y axis\n\n    -   y reordered variables based on vi column values (if not, chart will be displayed in alphabetical order by default)\n\n-   `geom_bar(stat = \"identity\")`: treat each row as individual record\n\n-   tell relative importance of variable; tell if model is working normally\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = vi,\n       aes(x = vi,\n           y = reorder(variables,vi))) +\ngeom_bar(stat = \"identity\")\n```\n\n::: {.cell-output-display}\n![](In-class_Ex09_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\nFind optimal bandwidth\n\n-   `bw.min` and `bw.max` - can help to speed up\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# set.seed((1234))\n# bw_grf <- grf.bw(formula = RESALE_PRICE ~\n#     FLOOR_AREA_SQM + STOREY_ORDER + REMAINING_LEASE_MTHS + PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER + \n#     PROX_MRT + PROX_PARK + PROX_GOOD_PRISCH + PROX_MALL + PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN + \n#     WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + WITHIN_1KM_PRISCH,\n#     dataset = train_df,\n#     kernel = \"adaptive\",\n#     coords = coords_train,\n#     bw.min = 25,\n#     bw.max = 60,\n#     step = 1\n#     )\n```\n:::\n\n\nPrediction\n\n-   no need to drop geometry (done)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# grf_pred <- predict.grf(rs_grf,\n#                         test_df,\n#                         x.var.name = \"X\",\n#                         y.var.name = \"Y\",\n#                         local.w = 1,\n#                         global.w = 0)\n```\n:::\n\n\nConvert the output into data.frame (output return in vector, which is harder to manipulate)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrf_pred <- read_rds(\"../../data/models/grf_pred.rds\")\ngrf_pred_df <- as.data.frame(grf_pred)\n```\n:::\n\n\nGet a data.frame that contains both true and predicted values\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_pred <- test_df %>% \n  select(RESALE_PRICE) %>% \n  cbind(grf_pred_df)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrf_pred <- predict(rs_rf, test_df)\nrf_pred_df <- as.data.frame(rf_pred$predictions) %>% \n  rename(rf_pred = \"rf_pred$predictions\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_pred <- cbind(test_pred,\n                   rf_pred_df)\n```\n:::\n\n\n\nprepare final data table\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmlr_pred <- predict(rs_mlr, test_df)\nmlr_pred_df <- as.data.frame(mlr_pred) %>% \n  rename(mlr_pred = \"mlr_pred\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_pred <- cbind(test_pred,\n                   mlr_pred_df)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nyardstick::rmse(test_pred,\n                RESALE_PRICE,\n                mlr_pred)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 Ã— 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 rmse    standard      61617.\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmc <- test_pred %>% \n  pivot_longer(cols = c(2:4),\n               names_to = \"models\",\n               values_to = \"predicted\")\nmc\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 23,853 Ã— 3\n   RESALE_PRICE models   predicted\n          <dbl> <chr>        <dbl>\n 1       360000 grf_pred   383674.\n 2       360000 rf_pred    384601.\n 3       360000 mlr_pred   384990.\n 4       370000 grf_pred   353244.\n 5       370000 rf_pred    358746.\n 6       370000 mlr_pred   387328.\n 7       375000 grf_pred   406702.\n 8       375000 rf_pred    407256.\n 9       375000 mlr_pred   379705.\n10       380000 grf_pred   375354.\n# â„¹ 23,843 more rows\n```\n\n\n:::\n:::\n",
    "supporting": [
      "In-class_Ex09_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}