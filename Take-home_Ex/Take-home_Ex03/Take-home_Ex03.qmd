---
title: "Take-home Exercise 3: NKDE"
execute:
  echo: true
  eval: true
  freeze: auto
  error: false
---

# Packages

```{r}
pacman::p_load(sf,tidyverse,spNetwork,tmap,classInt, viridis)
```

# Import data

```{r}
crime_data <- read_rds("../../data/proj_data/rds/accidents_thai.rds") %>% 
  st_transform(crs = 24047)
thai_bound <- st_read(dsn = "../../data/proj_data/thai_adm_boundary",
                      layer = "tha_admbnda_adm1_rtsd_20220121") %>% 
  st_transform(crs = 24047)
thai_road <- read_rds("../../data/proj_data/rds/thai_roads.rds") %>% 
  st_transform(crs = 24047)
```

# Visualising difference in network constrained kernel density through different filters by columns

Some potential filtering to apply to dataset to allow user to zoom in into specific area he/she is interested in:

-   Accident categories

-   Fatal accident \[yes/no\]

-   Province (MUST-HAVE)

But let's visualize the overall look

```{r}
#| fig-width: 12
#| fig-height: 12
plot(crime_data)
```

Example: filter by province = "Bangkok", accident_categories = "speeding", fatal_accident == "yes" (Allowing users to change freely)

```{r}
province_factor = "Bangkok"
accident_category = "speeding"
fatal = "yes"

crime_data_filtered = crime_data %>% 
  filter(province_en == province_factor,
         accident_categories == accident_category,
         fatal_accident == fatal)
```

# Network-constrained Kernel Density Estimation

### Get the portion of road network for the selected province



```{r}
thai_prov_sf <- thai_bound %>%
  group_by(ADM1_EN) %>% 
  summarise(geometry = st_union(geometry))

thai_prov <- thai_prov_sf %>% 
  filter(ADM1_EN == province_factor)
road_prov <- st_intersection(thai_road, thai_prov)
```

```{r}
road_prov_sf <- st_cast(road_prov,"LINESTRING")
```
```{r}
any(duplicated(road_prov_sf))
```

## Prepare `lixel` object

1st try with 1000m diameter

```{r}
lixels <- lixelize_lines(road_prov_sf,lx_length = 1000,mindist = 500)
```

## Generate line centre points

Likely to allow adjustment of kernel type, bandwidth set to be equivalent to `mindist` of lixels

```{r}
samples <- lines_center(lixels)
```

```{r}

densities <- nkde(road_prov_sf,
                  events = crime_data_filtered,
                  w = rep(1, nrow(crime_data_filtered)),
                  samples = samples,
                  ## important
                  kernel_name = "quartic",
                  bw = 500,
                  ## important
                  div = "bw",
                  method = "simple",
                  digits = 1,
                  tol = 1,
                  grid_shape = c(1,1),
                  max_depth = 8,
                  # aggregate events within 10m radius (faster calculation)
                  agg = 10,
                  sparse = TRUE,
                  verbose = FALSE
                  )
```

## Generate plot

```{r}
samples$density <- densities
lixels$density <- densities

samples$density <- samples$density*1000
lixels$density <- lixels$density*1000
```

```{r}
tmap_mode('view')
tm_shape(lixels)+
  tm_lines(col="density")+
tm_shape(crime_data_filtered)+
  tm_dots()
tmap_mode('plot')
```

# UI design for Analysis

![Storyboard of NKDE](ui_nkde.png){fig-align="center"}

The user would be able to filter the dataset to see impact different categories on the network-constrained kernel density map created and use the interpretation rules given to derive at a conclusion.
